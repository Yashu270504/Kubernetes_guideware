import os
import joblib
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
import matplotlib.pyplot as plt
from sklearn import tree

# Create directories
os.makedirs("models", exist_ok=True)
os.makedirs("data", exist_ok=True)
os.makedirs("docs", exist_ok=True)
os.makedirs("presentation", exist_ok=True)

print("Loading data...")
df = pd.read_csv('data/kubernetes_final_dataset.csv')

print("Handling missing values...")
df.fillna(0, inplace=True)

print("Encoding categorical variables...")
label_encoders = {}
for column in ['event_type', 'pod_status', 'deployment_strategy', 'scaling_policy', 'traffic_label']:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le

print("Selecting features...")
features = [
    'cpu_allocation_efficiency', 'memory_allocation_efficiency', 'disk_io', 'network_latency', 
    'node_temperature', 'node_cpu_usage', 'node_memory_usage', 'pod_lifetime_seconds', 
    'cpu_request', 'cpu_limit', 'memory_request', 'memory_limit', 'cpu_usage', 'memory_usage', 
    'restart_count', 'uptime_seconds', 'network_bandwidth_usage', 'network_bytes', 'event_duration'
]
X = df[features]
y = df['event_type']

print("Splitting data into training and testing sets...")
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Scaling features...")
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print("Training Random Forest Classifier...")
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

print("Evaluating the model...")
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

print("Saving the model and scaler...")
joblib.dump(model, 'models/kubernetes_failure_prediction_model.pkl')
joblib.dump(scaler, 'models/scaler.pkl')

print("Visualizing the first tree in the Random Forest...")
first_tree = model.estimators_[0]
plt.figure(figsize=(20, 10))
tree.plot_tree(first_tree, feature_names=features, filled=True, rounded=True)
plt.show()

print("Model training and evaluation complete!")
